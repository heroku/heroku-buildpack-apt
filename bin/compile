#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -eo pipefail

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
BP_DIR=$(cd "$(dirname "$0")"; cd ..; pwd)

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

if ! grep --invert-match -e "^\s*#" -e "^\s*$" -e "^:repo:" -q "${BUILD_DIR}/Aptfile"; then
  echo "
!       You have no packages listed in your Aptfile. If you don't need custom APT packages,
!       delete your Aptfile and remove the buildpack with:
!
!       $ heroku buildpacks:remove heroku-community/apt
"
  exit 0
fi

# Store which STACK we are running on in the cache to bust the cache if it changes
# This file really should be inside "${CACHE_DIR}/apt" not "${CACHE_DIR}/.apt", however, this
# buildpack has used the wrong directory name for it for some time, so there are many APT-related
# forks that use this path, so for backwards compatibility we're not changing the path, so as to
# not affect apps that have multiple APT-using buildpacks active at the same time.
STACK_VERSION_FILE="${CACHE_DIR}/.apt/STACK"
if [[ -f "${STACK_VERSION_FILE}" ]]; then
  CACHED_STACK=$(cat "${STACK_VERSION_FILE}")
else
  CACHED_STACK=
fi

# Ensure we store the STACK in the cache for next time.
mkdir -p "${CACHE_DIR}/.apt"
echo "${STACK}" > "${STACK_VERSION_FILE}"

APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
APT_SOURCELIST_DIR="$CACHE_DIR/apt/sources"   # place custom sources.list here
APT_SOURCEPARTS_DIR="$APT_SOURCELIST_DIR/sources.list.d"

APT_SOURCES="$APT_SOURCELIST_DIR/sources.list"

APT_VERSION=$(apt-get -v | awk 'NR == 1{ print $2 }')

case "$APT_VERSION" in
  0* | 1.0*) APT_FORCE_YES=("--force-yes");;
  *)         APT_FORCE_YES=("--allow-downgrades" "--allow-remove-essential" "--allow-change-held-packages");;
esac

if [[ -f "$APT_CACHE_DIR/Aptfile" ]] && cmp -s "$BUILD_DIR/Aptfile" "$APT_CACHE_DIR/Aptfile" && [[ "$CACHED_STACK" == "$STACK" ]] ; then
  # Old Aptfile is the same as new and STACK has not changed
  topic "Reusing cache"
else
  # Aptfile changed or does not exist or STACK changed
  topic "Detected Aptfile or Stack changes, flushing cache"
  rm -rf "${CACHE_DIR}/apt"
  mkdir -p "$APT_CACHE_DIR/archives/partial"
  mkdir -p "$APT_STATE_DIR/lists/partial"
  mkdir -p "$APT_SOURCELIST_DIR"   # make dir for sources
  cp -f "$BUILD_DIR/Aptfile" "$APT_CACHE_DIR/Aptfile"
  cat "/etc/apt/sources.list" > "$APT_SOURCES"    # no cp here
  cp -R "/etc/apt/sources.list.d" "$APT_SOURCEPARTS_DIR"
  # add custom repositories from Aptfile to sources.list
  # like>>    :repo:deb http://cz.archive.ubuntu.com/ubuntu artful main universe
  if grep -q -e "^:repo:" "$BUILD_DIR/Aptfile"; then
    topic "Adding custom repositories"
    grep -s -e "^:repo:" "$BUILD_DIR/Aptfile" | sed 's/^:repo:\(.*\)\s*$/\1/g' >> "$APT_SOURCES"
  fi
fi

APT_OPTIONS=("-o" "debug::nolocking=true" "-o" "dir::cache=$APT_CACHE_DIR" "-o" "dir::state=$APT_STATE_DIR")
# Override the use of /etc/apt/sources.list (sourcelist) and /etc/apt/sources.list.d/* (sourceparts).
APT_OPTIONS+=("-o" "dir::etc::sourcelist=$APT_SOURCES" "-o" "dir::etc::sourceparts=$APT_SOURCEPARTS_DIR")

topic "Updating APT package index"
apt-get "${APT_OPTIONS[@]}" update 2>&1 | indent

while IFS= read -r PACKAGE; do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename "$PACKAGE" .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl --silent --show-error --fail -L -z "$PACKAGE_FILE" -o "$PACKAGE_FILE" "$PACKAGE" 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    # while this is not documented behavior, the Aptfile format technically
    # did allow for multiple packages separated by spaces to be specified
    # on a single line due to how the download command was implemented so we
    # should respect that behavior since users are doing this
    IFS=$' \t' read -ra PACKAGE_NAMES <<< "$PACKAGE"
    apt-get "${APT_OPTIONS[@]}" -y "${APT_FORCE_YES[@]}" -d install --reinstall "${PACKAGE_NAMES[@]}" | indent
  fi
done < <(grep --invert-match -e "^\s*#" -e "^\s*$" -e "^:repo:" "${BUILD_DIR}/Aptfile")

mkdir -p "$BUILD_DIR/.apt"

for DEB in "$APT_CACHE_DIR/archives/"*.deb; do
  topic "Installing $(basename "$DEB")"
  dpkg -x "$DEB" "$BUILD_DIR/.apt/"
done

topic "Writing profile script"
mkdir -p "$BUILD_DIR/.profile.d"
RUNTIME_PROFILE_SCRIPT="$BUILD_DIR/.profile.d/000_apt.sh"
cat <<EOF >"$RUNTIME_PROFILE_SCRIPT"
export PATH="\$HOME/.apt/usr/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/include/x86_64-linux-gnu:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

export PATH="$BUILD_DIR/.apt/usr/bin:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/include/x86_64-linux-gnu:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"

#give environment to later buildpacks
topic "Exporting environment"
BUILDPACK_EXPORT_FILE="$BP_DIR/export"
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)=' > "$BUILDPACK_EXPORT_FILE"

topic "Rewrite package-config files"
find "$BUILD_DIR/.apt" -type f -ipath '*/pkgconfig/*.pc' -print0 | xargs -0 --no-run-if-empty -n 1 sed -i -e 's!^prefix=\(.*\)$!prefix='"$BUILD_DIR"'/.apt\1!g'

# post-installation logic for git
# If git was installed by this buildpack set `GIT_EXEC_PATH` to work around:
# https://github.com/heroku/heroku-buildpack-apt/issues/137
if [[ -f "${BUILD_DIR}/.apt/usr/bin/git" ]]; then
  GIT_CORE_DIR="${BUILD_DIR}/.apt/usr/lib/git-core"
  if [[ -d "$GIT_CORE_DIR" ]]; then
    topic "Setting GIT_EXEC_PATH to $GIT_CORE_DIR"
    # set env var in runtime profile script
    # shellcheck disable=SC2016
    echo 'export GIT_EXEC_PATH="$HOME/.apt/usr/lib/git-core"' >> "$RUNTIME_PROFILE_SCRIPT"
    # export the env var to later buildpacks
    echo "declare -x GIT_EXEC_PATH=\"$GIT_CORE_DIR\"" >> "$BUILDPACK_EXPORT_FILE"
  else
    topic "Git core directory $GIT_CORE_DIR is either missing or empty. Skipping GIT_EXEC_PATH setup."
  fi
fi
